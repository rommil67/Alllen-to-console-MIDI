#include <MIDI.h>   // Add Midi Library
//---------------------------------------------------------------------------
//----------------------------for signalisations work:----------------------
// Variables will chang 
int ledState = LOW;             // ledState used to set the LED

// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;        // will store last time LED was updated

// constants won't change:
const long interval = 1000;  
//-------------------------------------------------------
MIDI_CREATE_DEFAULT_INSTANCE();
/*
// define adress pins for adressed 74HC138 
#define pin_adress_01 A0
#define pin_adress_02 A1
#define pin_adress_03 A2
#define pin_adress_04 A3
#define pin_adress_05 A4
#define pin_adress_06 A5
#define pin_adress_07 A6
#define pin_adress_08 A7
#define pin_adress_09 A8
#define pin_adress_10 A9
#define pin_adress_11 A10
#define pin_adress_12 A11
#define pin_adress_13 A12
#define pin_adress_14 A13
#define pin_adress_15 A14
#define pin_adress_16 A15
*/

#define LiczbaKlawiszy (61)
boolean Key[LiczbaKlawiszy];
boolean Key2[LiczbaKlawiszy];
boolean Key3[LiczbaKlawiszy];
boolean Key4[LiczbaKlawiszy];
boolean Key5[LiczbaKlawiszy];

boolean Key_last[LiczbaKlawiszy];
boolean Key2_last[LiczbaKlawiszy];
boolean Key3_last[LiczbaKlawiszy];
boolean Key4_last[LiczbaKlawiszy];
boolean Key5_last[LiczbaKlawiszy];
int pin_adress[] = {10,11,12,A0,14,15,16,17,18,19,20,21,22,23,24,25}; // define adress pins 
int pin_data[] = {2,3,4,5,6,7,8,9, 26, 27, 28, 29}; // define data pins 
int pin_button[] = {A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53};
int value_note[] = {36, 44, 52, 60, 68, 76, 84, 92,
                    37, 45, 53, 61, 69, 77, 84, 93,
                    38, 46, 54, 62, 70, 78, 86, 94,
                    39, 47, 55, 63, 71, 79, 87, 95,
                    40, 48, 56, 64, 72, 80, 88, 96,
                    41, 49, 57, 65, 73, 81, 89, 97,
                    42, 50, 58, 66, 74, 82, 90, 98,
                    43, 51, 59, 67, 75, 83, 91, 99,
                    43, 51, 59, 67, 75, 83, 91, 99};

  


int vol = 90; // walue velocity
int channel_on = 0x90; // kanal 1 - initial variables for midi channel
int channel_off = 0x80; // kanal 1 - initial variables for midi channel

// int channel_on = 0x91; // kanal 2
// int channel_off = 0x81; // kanal 2

// int channel_on = 0x92; // kanal 3
// int channel_off = 0x81; // kanal 3

//int channel_on = 0x93; // kanal 4
//int channel_off = 0x83; // kanal 4

// int channel_on = 0x94; // kanal 5
// int channel_off = 0x84; // kanal 5

// int channel_on = 0x95; // kanal 6
// int channel_off = 0x85; // kanal 6

// int channel_on = 0x96; // kanal 7
// int channel_off = 0x86; // kanal 7

// int channel_on = 0x97; // kanal 8
// int channel_off = 0x87; // kanal 8

void setup()  {
  //Serial.begin (31250); //(31250); // setup serial for MIDI
  
  MIDI.begin(MIDI_CHANNEL_OMNI);
  //Serial.begin (31250); //(115200); //(31250); // setup serial for MIDI
  for (int i = 0; i <= LiczbaKlawiszy -1; i++) {
   Key[i] = 1;
   Key2[i] = 1;
   Key3[i] = 1;
   Key4[i] = 1;
   Key5[i] = 1;
   Key_last[i] = 1;
   Key2_last[i] = 1;
   Key3_last[i] = 1;
   Key4_last[i] = 1;
   Key5_last[i] = 1;
   }
   
  // define input pin_data
  for (int i = 0; i <= 11; i++) {
  pinMode(pin_data[i], INPUT_PULLUP);
  }

  // define input pin_button
  for (int i = 0; i <= 38; i++) {
  pinMode(pin_button[i], INPUT_PULLUP);
  }
  
  //  define output pin_adress
  for (int i = 0; i <= 15; i++) {
  pinMode(pin_adress[i], OUTPUT);
  digitalWrite(pin_adress[i], HIGH);
  }
  /*
  //define output pin_adress 
    pinMode(pin_adress_01, OUTPUT);
 digitalWrite(pin_adress_01, HIGH);
    pinMode(pin_adress_02, OUTPUT);
 digitalWrite(pin_adress_02, HIGH);  
    pinMode(pin_adress_03, OUTPUT);
digitalWrite(pin_adress_03, HIGH);
    pinMode(pin_adress_04, OUTPUT);
 digitalWrite(pin_adress_04, HIGH);
   pinMode(pin_adress_05, OUTPUT);
 digitalWrite(pin_adress_05, HIGH);
  pinMode(pin_adress_06, OUTPUT);
 digitalWrite(pin_adress_06, HIGH);
  pinMode(pin_adress_07, OUTPUT);
 digitalWrite(pin_adress_07, HIGH);
  pinMode(pin_adress_08, OUTPUT);
 digitalWrite(pin_adress_08, HIGH);
  pinMode(pin_adress_09, OUTPUT);
 digitalWrite(pin_adress_09, HIGH);
  pinMode(pin_adress_10, OUTPUT);
 digitalWrite(pin_adress_10, HIGH);
  pinMode(pin_adress_11, OUTPUT);
 digitalWrite(pin_adress_11, HIGH);
  pinMode(pin_adress_11, OUTPUT);
 digitalWrite(pin_adress_11, HIGH);
 pinMode(pin_adress_12, OUTPUT);
 digitalWrite(pin_adress_12, HIGH);
 pinMode(pin_adress_13, OUTPUT);
 digitalWrite(pin_adress_13, HIGH);
 pinMode(pin_adress_14, OUTPUT);
 digitalWrite(pin_adress_14, HIGH);
 pinMode(pin_adress_15, OUTPUT);
 digitalWrite(pin_adress_15, HIGH);
 pinMode(pin_adress_16, OUTPUT);
 digitalWrite(pin_adress_16, HIGH);

*/

// define output LED
pinMode(13, OUTPUT);


}

void loop()  {
//MIDI.read(); // Continuously check if Midi data has been received.
  
  // vol = analogRead(A5);
  // vol = map(vol, 0, 1023, 0, 127);

   //*****************************************
 //Obsługa man I

  channel_on = 0x90; // setup variable chcnell for man. I kanal 1
  channel_off = 0x80; // ustawienie zmiennych kanału midi dla I man. kanal 1
 for (int n = 0; n <= 15; n++) {
    digitalWrite(pin_adress[n], LOW);
          for (int i = 0; i <= 3; i++) {
          Key[i+n*4] = digitalRead(pin_data[i]);
         }
    digitalWrite(pin_adress[n], HIGH);     
 }   

 

//****************************************************
// porównywanie odczytów i wysyłanie komunikatów midi

for (int i = 0; i <= LiczbaKlawiszy -1; i++) {
    if(Key[i] != Key_last[i] ) {
        if(Key[i] == 0)  {
            noteOn(channel_on, 36+i, vol);
        }
         else  {
            noteOn(channel_off, 36+i, 0x00);
            noteOn(channel_off, 36+i, 0x00);
        }
    }
}
  
 
 
 //*****************************************
 //Obsługa man II

    channel_on = 0x91; // ustawienie kanałów dla II man - kanal 2
    channel_off = 0x81; // kanal 2

 for (int n = 0; n <= 15; n++) {
    digitalWrite(pin_adress[n], LOW);
          for (int i = 4; i <= 7; i++) {
          Key2[(i-4)+n*4] = digitalRead(pin_data[i]);
         }
    digitalWrite(pin_adress[n], HIGH);     
 }   

 

//****************************************************
// porównywanie odczytów i wysyłanie komunikatów midi dla man II
// 
   for (int i = 0; i <= LiczbaKlawiszy -1; i++) {
    if(Key2[i] != Key2_last[i] ) {
    if(Key2[i] == 0)  {
      noteOn(channel_on, 36+i, vol);
    }
    else  {
      noteOn(channel_off, 36+i, 0x00);
      noteOn(channel_off, 36+i, 0x00);
    }
  }
  }
//*****************************************
  //*****************************************
 //Obsługa Ped

  channel_on = 0x92; // setup variable chcnell for man. I kanal 1
  channel_off = 0x82; // ustawienie zmiennych kanału midi dla I man. kanal 1
 for (int n = 0; n <= 15; n++) {
    digitalWrite(pin_adress[n], LOW);
          for (int i = 8; i <= 11; i++) {
          Key3[(i-8)+n*4] = digitalRead(pin_data[i]);
         }
    digitalWrite(pin_adress[n], HIGH);     
 }   

 

//****************************************************
// porównywanie odczytów i wysyłanie komunikatów midi

for (int i = 0; i <= LiczbaKlawiszy -1; i++) {
    if(Key3[i] != Key3_last[i] ) {
        if(Key3[i] == 0)  {
            noteOn(channel_on, 36+i, vol);
        }
         else  {
            noteOn(channel_off, 36+i, 0x00);
            noteOn(channel_off, 36+i, 0x00);
        }
    }
}
  
 
 //koniec obsługi pedału
 //*****************************************
  //*****************************************
 //Obsługa registrów

  channel_on = 0x93; // setup variable chcnell for man. I kanal 1
  channel_off = 0x83; // ustawienie zmiennych kanału midi dla I man. kanal 1
 
          for (int i = 0; i <= 38; i++) {
          Key4[i] = digitalRead(pin_button[i]);
         }
    

 

//****************************************************
// porównywanie odczytów i wysyłanie komunikatów midi

for (int i = 0; i <= LiczbaKlawiszy -1; i++) {
    if(Key4[i] != Key4_last[i] ) {
        if(Key4[i] == 0)  {
            noteOn(channel_on, 36+i, vol);
        }
         else  {
            noteOn(channel_off, 36+i, 0x00);
            noteOn(channel_off, 36+i, 0x00);
        }
    }
}
  
 
 //koniec obsługi registrów
 //*****************************************
  
  for (int i = 0; i <= LiczbaKlawiszy -1; i++) {
  Key_last[i] = Key[i];
 }
 for (int i = 0; i <= LiczbaKlawiszy -1 ; i++) {
  Key2_last[i] = Key2[i];
 }
 for (int i = 0; i <= LiczbaKlawiszy -1 ; i++) {
  Key3_last[i] = Key3[i];
 }  
  for (int i = 0; i <= LiczbaKlawiszy -1 ; i++) {
  Key4_last[i] = Key4[i];
 }  
  for (int i = 0; i <= LiczbaKlawiszy -1 ; i++) {
  Key5_last[i] = Key5[i];
 }  
 //**************************************

 // moduł sygnalizacji działania 
 //----------------------------------------------------------
 unsigned long currentMillis = millis();
 // szybkość działania programu
 // Serial.println(currentMillis);

  if (currentMillis - previousMillis >= interval) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;

    // if the LED is off turn it on and vice-versa:
    if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }

    // set the LED with the ledState of the variable:
    digitalWrite(13, ledState);
  }
//---------------------------------------------------------------  
}

 void noteOn(byte cmd, byte data1, byte data2) {
   Serial.write(cmd);
   Serial.write(data1);
   Serial.write(data2);
   // MIDI.sendNoteOn(data1, data2, cmd);
   digitalWrite(13, HIGH);
   delay(5);
   digitalWrite(13, LOW);
 }
